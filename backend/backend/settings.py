"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

load_dotenv()



# --- INICIO DE DEPURACIÓN DE VARIABLES DE ENTORNO ---
print(f"DEBUG DB_NAME: {os.getenv('MYSQL_DATABASE')}")
print(f"DEBUG DB_USER: {os.getenv('MYSQLUSER')}")
print(f"DEBUG DB_PASSWORD: {os.getenv('MYSQL_ROOT_PASSWORD')}")
print(f"DEBUG DB_HOST: {os.getenv('MYSQLHOST')}")
print(f"DEBUG DB_PORT: {os.getenv('MYSQLPORT')}")
# --- INICIO DE DEPURACIÓN DE VARIABLES DE ENTORNO PERSONALIZADAS ---
print(f"DEBUG ENV - DATABASE_SERVER: {os.getenv('DATABASE_SERVER')}")
print(f"DEBUG ENV - DATABASE_USER: {os.getenv('DATABASE_USER')}")
print(f"DEBUG ENV - DATABASE_PASSWORD: {os.getenv('DATABASE_PASSWORD')}")
print(f"DEBUG ENV - DATABASE_PORT: {os.getenv('DATABASE_PORT')}")
print(f"DEBUG ENV - DATABASE_BD: {os.getenv('DATABASE_BD')}")
print(f"DEBUG ENV - DEBUG: {os.getenv('DEBUG')}")
print(f"DEBUG ENV - BASE_URL: {os.getenv('BASE_URL')}")
print(f"DEBUG ENV - BASE_URL_BACKEND_PORT: {os.getenv('BASE_URL_BACKEND_PORT')}")
print(f"DEBUG ENV - SMTP_SERVER: {os.getenv('SMTP_SERVER')}")
print(f"DEBUG ENV - SMTP_PORT: {os.getenv('SMTP_PORT')}")
print(f"DEBUG ENV - SMTP_BY: {os.getenv('SMTP_BY')}")
print(f"DEBUG ENV - SMTP_USER: {os.getenv('SMTP_USER')}")
print(f"DEBUG ENV - SMTP_PASSWORD: {os.getenv('SMTP_PASSWORD')}")
# --- FIN DE DEPURACIÓN ---
# --- FIN DE DEPURACIÓN ---

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-+s5%nby87nn*sy1f(nvz#6s0!f)vn7g9s+qfs0ax5nz&$7(i1#'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG')

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')


ALLOWED_HOSTS = [os.getenv('BASE_URL'), '*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'whitenoise.runserver_nostatic',
    'drf_yasg',
    'rest_framework',
    'corsheaders',
    'user_control',
    'incident',
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (

    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
}

SWAGGER_SETTINGS = {
    'USE_SESSION_AUTH': False,
    'SECURITY_DEFINITIONS': {
        'Bearer': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header',
            'description': 'Token de autorización JWT. Ingresa "Bearer {token}" (reemplaza {token} con tu token real).'
        }
    }
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
]

# Para que cualquier cliente http se pueda conectar
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGIN_REGEXES = [r".*"]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.getenv('MYSQL_DATABASE'), #BD
        'USER': os.getenv('MYSQLUSER'),
        'PASSWORD': os.getenv('MYSQL_ROOT_PASSWORD'),
        'HOST': os.getenv('MYSQLHOST'),
        'PORT': os.getenv('MYSQLPORT'),
        'OPTIONS': {
            'autocommit': True,
            'init_command': "SET default_storage_engine=INNODB;"
        },
        'ATOMIC_REQUESTS': True,
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'es-es'

TIME_ZONE = 'America/El_Salvador'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/assets/'
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'assets'),
)
MEDIA_URL = '/uploads/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'uploads')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'